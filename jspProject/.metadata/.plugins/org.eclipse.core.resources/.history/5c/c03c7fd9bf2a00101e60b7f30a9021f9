package com.project.jsp.model.dao;

import java.io.FileInputStream;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.List;
import java.util.Properties;

import com.project.jsp.model.domain.Member;
import com.project.jsp.model.domain.Post;

public class MemberDao {
	private PreparedStatement pstmt;
	private Statement stmt;
	private ResultSet rs;
	private Properties prop;
	
	public MemberDao() {
		try {
			prop = new Properties();
			String filePath = 
					Member.class.getResource("/com/project/jsp/util/sql/member-sql.xml").getPath();
			
			prop.loadFromXML(new FileInputStream(filePath));
			
		}catch(Exception e) {
			e.printStackTrace();
		}
	}
	public Member login(Connection conn, String inputId, String inputPw) {
		Member loginMember = null;
		
		try {
			String sql = prop.getProperty("login");
			pstmt = conn.prepareStatement(sql);
			pstmt.setString(1, inputId);
			pstmt.setString(2, inputPw);
			rs = pstmt.executeQuery();
			
			if(rs.next()) {
				System.out.print("로그인 가능");
				loginMember = new Member();
				loginMember.setId(rs.getInt("id"));
				loginMember.setNickName(rs.getString("nickname"));
				loginMember.setEmail(rs.getString("email"));
				loginMember.setJoinDate(rs.getDate("joindate"));
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}finally {
			try {
				if(rs != null)rs.close();
				if(pstmt!= null)pstmt.close();
			} catch (SQLException e) {
				e.printStackTrace();
			}
			
		}
		
		
		return loginMember;
	}
	public boolean duplicateAcount(Connection conn, String nickName, String email) {
		try {
			String sql = prop.getProperty("isDup");
			pstmt = conn.prepareStatement(sql);
			pstmt.setString(1, nickName);
			pstmt.setString(2, email);
			rs = pstmt.executeQuery();
			if(rs.next()) {
				return true;
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}finally {
			try {
				if(rs != null)rs.close();
				if(pstmt!= null)pstmt.close();
			} catch (SQLException e) {
				e.printStackTrace();
			}
		}
		return false;
		
	}
	public int insertMember(Connection conn, String nickName, String pw, String email) {
		int result = 0;
		try {
			String sql = prop.getProperty("signup");
			pstmt = conn.prepareStatement(sql);
			pstmt.setString(1, nickName);
			pstmt.setString(2, email);
			pstmt.setString(3, pw);
			result = pstmt.executeUpdate();
			System.out.print(result);
		} catch (SQLException e) {
			e.printStackTrace();
		}finally {
			try {
				if(pstmt!= null)pstmt.close();
			} catch (SQLException e) {
				e.printStackTrace();
			}
		}
		return result;
	}


}
