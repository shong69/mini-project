package com.project.jsp.model.dao;

import java.io.FileInputStream;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;
import java.util.Properties;

import com.project.jsp.model.domain.Comment;
import com.project.jsp.model.domain.Post;

public class BoardDao {
	public static final int PAGE_SIZE = 10;
	private PreparedStatement pstmt;
	private Statement stmt;
	private ResultSet rs;
	private Properties prop;
	public BoardDao() {
		try {
			prop = new Properties();
			String filePath = 
					Post.class.getResource("/com/project/jsp/util/sql/board-sql.xml").getPath();
			
			prop.loadFromXML(new FileInputStream(filePath));
			
		}catch(Exception e) {
			e.printStackTrace();
		}
	}

	public List<Post> getAllPost(Connection conn, int pageNum, String category, String searchKeyword) {
		List<Post> postList = new ArrayList<>();;
		try {
            String queryKey = "getAllPost";
            if (searchKeyword != null && !searchKeyword.isEmpty()) {
                if ("title".equals(category)) queryKey = "searchByTitle";
                else if ("nickname".equals(category)) queryKey = "searchByNickname";
                else queryKey = "searchByAll";
            }
			String sql = prop.getProperty(queryKey);
			pstmt = conn.prepareStatement(sql);
            int offset = (pageNum - 1) * 10;

			if("searchByAll".equals(queryKey)) {
			    pstmt.setString(1, "%" + searchKeyword + "%");
			    pstmt.setString(2, "%" + searchKeyword + "%");
			    pstmt.setInt(3, offset);
			    pstmt.setInt(4, 10);
			}else if (queryKey.equals("getAllPost")) {
                pstmt.setInt(1, offset);
                pstmt.setInt(2, 10);
            } else {
                pstmt.setString(1, "%" + searchKeyword + "%");
                pstmt.setInt(2, offset);
                pstmt.setInt(3, 10);
            }
            rs = pstmt.executeQuery();
			while(rs.next()) {
				Post post = new Post();
				post.setId(rs.getInt("id"));
				post.setNickName(rs.getString("nickname"));
				post.setTitle(rs.getString("title"));
				post.setContent(rs.getString("content"));
				post.setDate(rs.getDate("date"));
				post.setCommentCount(rs.getInt("comment_count"));
				postList.add(post);
			}
		} catch (SQLException e) {
			e.printStackTrace();
		} finally {
			try {
				if(rs != null)
					rs.close();
				if(pstmt!= null)
					pstmt.close();
			} catch (SQLException e) {
				e.printStackTrace();
			}
		}
		
		
		return postList;
	}

	public int getTotalPostsCount(Connection conn, String category, String searchKeyword) {
		int totalCount = 0;
		
		try {
			String queryKey = "countAllPost";
	        if (category != null && !category.isEmpty() && searchKeyword != null && !searchKeyword.isEmpty()) {
	            if (category.equals("title")) {
	                queryKey = "countByTitle";
	            } else if (category.equals("nickname")) {
	                queryKey = "countByNickname";
	            }
	        }
			String sql = prop.getProperty(queryKey);
			pstmt = conn.prepareStatement(sql);
			
	        if (!queryKey.equals("countAllPost")) {
	            pstmt.setString(1, "%" + searchKeyword + "%");
	        }

	        rs = pstmt.executeQuery();
	        if (rs.next()) {
	            totalCount = rs.getInt(1);
	        }
		} catch (SQLException e) {
			e.printStackTrace();
		} finally {
				try {
					if(rs!= null)rs.close();
					if(pstmt != null)pstmt.close();
				} catch (SQLException e) {
					e.printStackTrace();
				}
		}

		return totalCount;
	}

	public Post getPost(int postId) {
		Post post = null;
		try {
			String sql = prop.getProperty("getPostById");
			pstmt.setInt(1, postId);
			rs = pstmt.executeQuery();
			if(rs.next()) {
				post = new Post();
	            post.setId(rs.getInt("ID"));
	            post.setTitle(rs.getString("TITLE"));
	            post.setContent(rs.getString("CONTENT"));
	            post.setNickName(rs.getString("NICKNAME"));
	            post.setDate(rs.getDate("DATE"));
	            post.setCommentCount(rs.getInt("COMMENT_COUNT"));
	            post.setMemberId(rs.getInt("MEMBERID"));
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return null;
	}

	public List<Comment> getCommentByPostId(int postId) {
		// TODO Auto-generated method stub
		return null;
	}




}
